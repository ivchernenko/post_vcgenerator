/**
 * generated by Xtext 2.28.0
 */
package su.nsk.iae.post.poST.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import su.nsk.iae.post.poST.Expression;
import su.nsk.iae.post.poST.PoSTPackage;
import su.nsk.iae.post.poST.WhileStatement;
import java.util.*;
import su.nsk.iae.post.vcgenerator.*;
/**


 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>While Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.post.poST.impl.WhileStatementImpl#getCond <em>Cond</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WhileStatementImpl extends IterationStatementImpl implements WhileStatement
{
	/**
	 * The cached value of the '{@link #getCond() <em>Cond</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCond()
	 * @generated
	 * @ordered
	 */
	protected Expression cond;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileStatementImpl()
	{
		super();
	}

	@Override
	public List<Path> applyTo(List<Path> paths, VCGeneratorState globVars) {
		FunctionSymbol loopinv = globVars.nextLoopInv();
		Variable s0 = new Variable("s0'");
		globVars.addVcFunctionParam(loopinv);
		globVars.addVcVariableParam(s0);
		List<Path> result = new ArrayList<>();
		for (Path path : paths)
			if (path.getStatus() == ExecutionStatus.NORMAL)
				globVars.addVerificationCondition(path.generateVerificationCondition(loopinv));
			else
				result.add(path);
		Term inv = new ComplexTerm(loopinv, s0);
		Term cond = this.cond.generateExpression(s0, globVars);
		Path loopBody = new Path(inv, s0);
		loopBody.assertion(cond.getPrecondition(), globVars);
		loopBody = loopBody.addCondition(cond);
		List<Path> loopBodyPaths = statement.applyTo(loopBody, globVars);
		for (Path path: loopBodyPaths)
			switch (path.getStatus()) {
			case NORMAL:
				globVars.addVerificationCondition(path.generateVerificationCondition(loopinv));
				break;
			case EXIT:
				path.resetStatus();
				result.add(path);
				break;
			case RETURN:
				result.add(path);
		}
		Path loopPostcondition = new Path(inv, s0);
		if (cond.getPrecondition() != null)
			loopPostcondition = loopPostcondition.addCondition(cond.getPrecondition());
		loopPostcondition = loopPostcondition.addCondition(new ComplexTerm(FunctionSymbol.NOT, cond));
		result.add(loopPostcondition);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass()
	{
		return PoSTPackage.Literals.WHILE_STATEMENT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Expression getCond()
	{
		return cond;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetCond(Expression newCond, NotificationChain msgs)
	{
		Expression oldCond = cond;
		cond = newCond;
		if (eNotificationRequired())
		{
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PoSTPackage.WHILE_STATEMENT__COND, oldCond, newCond);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setCond(Expression newCond)
	{
		if (newCond != cond)
		{
			NotificationChain msgs = null;
			if (cond != null)
				msgs = ((InternalEObject)cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PoSTPackage.WHILE_STATEMENT__COND, null, msgs);
			if (newCond != null)
				msgs = ((InternalEObject)newCond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PoSTPackage.WHILE_STATEMENT__COND, null, msgs);
			msgs = basicSetCond(newCond, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, PoSTPackage.WHILE_STATEMENT__COND, newCond, newCond));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
	{
		switch (featureID)
		{
		case PoSTPackage.WHILE_STATEMENT__COND:
			return basicSetCond(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType)
	{
		switch (featureID)
		{
		case PoSTPackage.WHILE_STATEMENT__COND:
			return getCond();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue)
	{
		switch (featureID)
		{
		case PoSTPackage.WHILE_STATEMENT__COND:
			setCond((Expression)newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
		case PoSTPackage.WHILE_STATEMENT__COND:
			setCond((Expression)null);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID)
	{
		switch (featureID)
		{
		case PoSTPackage.WHILE_STATEMENT__COND:
			return cond != null;
		}
		return super.eIsSet(featureID);
	}

} //WhileStatementImpl
