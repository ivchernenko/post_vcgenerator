/**
 * generated by Xtext 2.28.0
 */
package su.nsk.iae.post.poST.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import su.nsk.iae.post.poST.Expression;
import su.nsk.iae.post.poST.MulExpression;
import su.nsk.iae.post.poST.MulOperator;
import su.nsk.iae.post.poST.PoSTPackage;

import su.nsk.iae.post.vcgenerator.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mul Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.post.poST.impl.MulExpressionImpl#getMulOp <em>Mul Op</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MulExpressionImpl extends AddExpressionImpl implements MulExpression
{
	/**
	 * The default value of the '{@link #getMulOp() <em>Mul Op</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getMulOp()
	 * @generated
	 * @ordered
	 */
	protected static final MulOperator MUL_OP_EDEFAULT = MulOperator.MUL;

	/**
	 * The cached value of the '{@link #getMulOp() <em>Mul Op</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getMulOp()
	 * @generated
	 * @ordered
	 */
	protected MulOperator mulOp = MUL_OP_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MulExpressionImpl()
	{
		super();
	}

	@Override
	public Term generateExpression(Term currentState, VCGeneratorState globVars) {
		Expression left = getLeft();
		Expression right = getRight();
		MulOperator op = getMulOp();
		Term symComputedLeft = left.generateExpression(currentState, globVars);
		Term symComputedRight = right.generateExpression(currentState, globVars);
		if (op == MulOperator.MUL) {
			Term result = TermFactory.mul(symComputedLeft, symComputedRight);
			result.addCondition(symComputedLeft.getPrecondition());
			result.addCondition(symComputedRight.getPrecondition());
			return result;
		}

		else if (op == MulOperator.DIV)
			if (symComputedLeft.isReal() || symComputedRight.isReal()) {
				Term result = TermFactory.rdiv(symComputedLeft, symComputedRight);
				result.addCondition(symComputedLeft.getPrecondition());
				result.addCondition(symComputedRight.getPrecondition());
				return result;
			}				
			else {
				Term result = TermFactory.div(symComputedLeft, symComputedRight);
				result.addCondition(symComputedLeft.getPrecondition());
				result.addCondition(symComputedRight.getPrecondition());
				result.addCondition(TermFactory.noteq(symComputedRight, new Constant(0)));
				return result;
			}
		else { // MOD
			Term result = TermFactory.mod(symComputedLeft, symComputedRight);
			result.addCondition(symComputedLeft.getPrecondition());
			result.addCondition(symComputedRight.getPrecondition());
			result.addCondition(TermFactory.noteq(symComputedRight, new Constant(0)));
			return result;
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass()
	{
		return PoSTPackage.Literals.MUL_EXPRESSION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public MulOperator getMulOp()
	{
		return mulOp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setMulOp(MulOperator newMulOp)
	{
		MulOperator oldMulOp = mulOp;
		mulOp = newMulOp == null ? MUL_OP_EDEFAULT : newMulOp;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, PoSTPackage.MUL_EXPRESSION__MUL_OP, oldMulOp, mulOp));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType)
	{
		switch (featureID)
		{
		case PoSTPackage.MUL_EXPRESSION__MUL_OP:
			return getMulOp();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue)
	{
		switch (featureID)
		{
		case PoSTPackage.MUL_EXPRESSION__MUL_OP:
			setMulOp((MulOperator)newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
		case PoSTPackage.MUL_EXPRESSION__MUL_OP:
			setMulOp(MUL_OP_EDEFAULT);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID)
	{
		switch (featureID)
		{
		case PoSTPackage.MUL_EXPRESSION__MUL_OP:
			return mulOp != MUL_OP_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString()
	{
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (mulOp: ");
		result.append(mulOp);
		result.append(')');
		return result.toString();
	}

} //MulExpressionImpl
