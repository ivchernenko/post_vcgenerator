/**
 * generated by Xtext 2.28.0
 */
package su.nsk.iae.post.poST.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import su.nsk.iae.post.poST.EquExpression;
import su.nsk.iae.post.poST.EquOperator;
import su.nsk.iae.post.poST.Expression;
import su.nsk.iae.post.poST.PoSTPackage;

import su.nsk.iae.post.vcgenerator.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Equ Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.post.poST.impl.EquExpressionImpl#getEquOp <em>Equ Op</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EquExpressionImpl extends CompExpressionImpl implements EquExpression
{
	/**
	 * The default value of the '{@link #getEquOp() <em>Equ Op</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEquOp()
	 * @generated
	 * @ordered
	 */
	protected static final EquOperator EQU_OP_EDEFAULT = EquOperator.LESS;

	/**
	 * The cached value of the '{@link #getEquOp() <em>Equ Op</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEquOp()
	 * @generated
	 * @ordered
	 */
	protected EquOperator equOp = EQU_OP_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EquExpressionImpl()
	{
		super();
	}

	@Override
	public Term generateExpression(Term currentState, VCGeneratorState globVars) {
		Expression left = getLeft();
		Expression right = getRight();
		EquOperator op = getEquOp();
		Term symComputedLeft = left.generateExpression(currentState, globVars);
		Term symComputedRight = right.generateExpression(currentState, globVars);
		Term result;
		if (op == EquOperator.LESS)
			result = TermFactory.less(symComputedLeft, symComputedRight);
		else if (op == EquOperator.GREATER)
			result = TermFactory.greater(symComputedLeft, symComputedRight);
		else if (op == EquOperator.LESS_EQU)
			result = TermFactory.leq(symComputedLeft, symComputedRight);
		else // GREATER_EQU
			result = TermFactory.geq(symComputedLeft, symComputedRight);
		result.addCondition(symComputedLeft.getPrecondition());
		result.addCondition(symComputedRight.getPrecondition());
		return result;
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass()
	{
		return PoSTPackage.Literals.EQU_EXPRESSION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EquOperator getEquOp()
	{
		return equOp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setEquOp(EquOperator newEquOp)
	{
		EquOperator oldEquOp = equOp;
		equOp = newEquOp == null ? EQU_OP_EDEFAULT : newEquOp;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, PoSTPackage.EQU_EXPRESSION__EQU_OP, oldEquOp, equOp));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType)
	{
		switch (featureID)
		{
		case PoSTPackage.EQU_EXPRESSION__EQU_OP:
			return getEquOp();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue)
	{
		switch (featureID)
		{
		case PoSTPackage.EQU_EXPRESSION__EQU_OP:
			setEquOp((EquOperator)newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
		case PoSTPackage.EQU_EXPRESSION__EQU_OP:
			setEquOp(EQU_OP_EDEFAULT);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID)
	{
		switch (featureID)
		{
		case PoSTPackage.EQU_EXPRESSION__EQU_OP:
			return equOp != EQU_OP_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString()
	{
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (equOp: ");
		result.append(equOp);
		result.append(')');
		return result.toString();
	}

} //EquExpressionImpl
