/**
 * generated by Xtext 2.28.0
 */
package su.nsk.iae.post.poST.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import su.nsk.iae.post.poST.CompExpression;
import su.nsk.iae.post.poST.CompOperator;
import su.nsk.iae.post.poST.Expression;
import su.nsk.iae.post.poST.PoSTPackage;

import su.nsk.iae.post.vcgenerator.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Comp Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.post.poST.impl.CompExpressionImpl#getCompOp <em>Comp Op</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CompExpressionImpl extends AndExpressionImpl implements CompExpression
{
	/**
	 * The default value of the '{@link #getCompOp() <em>Comp Op</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCompOp()
	 * @generated
	 * @ordered
	 */
	protected static final CompOperator COMP_OP_EDEFAULT = CompOperator.EQUAL;

	/**
	 * The cached value of the '{@link #getCompOp() <em>Comp Op</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCompOp()
	 * @generated
	 * @ordered
	 */
	protected CompOperator compOp = COMP_OP_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompExpressionImpl()
	{
		super();
	}

	@Override
	public Term generateExpression(Term currentState, VCGeneratorState globVars) {
		Expression left = getLeft();
		Expression right = getRight();
		CompOperator op = getCompOp();
		Term symComputedLeft = left.generateExpression(currentState, globVars);
		Term symComputedRight = right.generateExpression(currentState, globVars);
		Term result;
		if (op == CompOperator.EQUAL)
			result = TermFactory.eq(symComputedLeft, symComputedRight);
		else // NOT_EQUAL
			result = TermFactory.noteq(symComputedLeft, symComputedRight);
		result.addCondition(symComputedLeft.getPrecondition());
		result.addCondition(symComputedRight.getPrecondition());
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass()
	{
		return PoSTPackage.Literals.COMP_EXPRESSION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public CompOperator getCompOp()
	{
		return compOp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setCompOp(CompOperator newCompOp)
	{
		CompOperator oldCompOp = compOp;
		compOp = newCompOp == null ? COMP_OP_EDEFAULT : newCompOp;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, PoSTPackage.COMP_EXPRESSION__COMP_OP, oldCompOp, compOp));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType)
	{
		switch (featureID)
		{
		case PoSTPackage.COMP_EXPRESSION__COMP_OP:
			return getCompOp();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue)
	{
		switch (featureID)
		{
		case PoSTPackage.COMP_EXPRESSION__COMP_OP:
			setCompOp((CompOperator)newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
		case PoSTPackage.COMP_EXPRESSION__COMP_OP:
			setCompOp(COMP_OP_EDEFAULT);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID)
	{
		switch (featureID)
		{
		case PoSTPackage.COMP_EXPRESSION__COMP_OP:
			return compOp != COMP_OP_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString()
	{
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (compOp: ");
		result.append(compOp);
		result.append(')');
		return result.toString();
	}

} //CompExpressionImpl
