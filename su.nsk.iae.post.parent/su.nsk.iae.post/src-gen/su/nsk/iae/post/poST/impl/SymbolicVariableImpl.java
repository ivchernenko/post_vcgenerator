/**
 * generated by Xtext 2.28.0
 */
package su.nsk.iae.post.poST.impl;

import org.eclipse.emf.ecore.EClass;

import su.nsk.iae.post.poST.PoSTPackage;
import su.nsk.iae.post.poST.SymbolicVariable;
import su.nsk.iae.post.vcgenerator.ComplexTerm;
import su.nsk.iae.post.vcgenerator.DataType;
import su.nsk.iae.post.vcgenerator.FunctionSymbol;
import su.nsk.iae.post.vcgenerator.Term;
import su.nsk.iae.post.vcgenerator.Utils;
import su.nsk.iae.post.vcgenerator.VCGeneratorState;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Symbolic Variable</b></em>'.
 * <!-- end-user-doc -->
 *
 * @generated
 */
public class SymbolicVariableImpl extends VariableImpl implements SymbolicVariable
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SymbolicVariableImpl()
  {
    super();
  }
  
  @Override
  public Term generateVariable(Term currentState, VCGeneratorState globVars) {
		String varType = globVars.getVarType(name);
		su.nsk.iae.post.vcgenerator.Constant varNameCode = globVars.getVariable(name);
		if (globVars.isConstant(varNameCode))
			return globVars.getConstantValue(varNameCode);
		if ("BOOL".equals(varType))
			return new ComplexTerm(DataType.BOOL, FunctionSymbol.getVarBool, currentState, varNameCode);
		else if (Utils.isIntegerTypeName(varType))
			return new ComplexTerm(DataType.INT, FunctionSymbol.getVarInt, currentState, varNameCode);
		else if (Utils.isRealTypeName(varType))
			return new ComplexTerm(DataType.REAL, FunctionSymbol.getvarReal, currentState, varNameCode);
		else // TIME 
			return new ComplexTerm(DataType.INT, FunctionSymbol.getVarInt, currentState, varNameCode);
	}
  
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PoSTPackage.Literals.SYMBOLIC_VARIABLE;
  }

} //SymbolicVariableImpl
